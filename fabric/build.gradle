plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    // Create, Registrate, Milk Lib, Dripstone Fluid Lib
    maven {
        url = "https://mvn.devos.one/snapshots/"
    }

    // Porting Lib
    maven {
        url = "https://mvn.devos.one/releases/"
    }

    // Reach Entity Attributes
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:${architectury_api_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modImplementation "com.simibubi.create:create-fabric:${project.create_fabric_version}"
}

processResources {
    def props = [
            'version'                 : version,
            'architectury_api_version': architectury_api_version,
            'minecraft_version'       : minecraft_version,
            'create_version_short'    : create_version_short
    ]

    inputs.properties props

    filesMatching('fabric.mod.json') {
        expand props
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
